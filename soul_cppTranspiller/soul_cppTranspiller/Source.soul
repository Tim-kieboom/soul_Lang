/*
//Result is Result<T, default=str>
func passErrorChild(bool value): Result<i32>
{
	if(value == true)
		return 1;

	return Error("error thrown");
}

//Result is Result<T, i32>
func passErrorInt(bool value): Result<i32, i32>
{
	if(value == true)
		return 1;

	return Error(-1);
}

func passErrorParent(bool value): Result<str>
{	
	//if Ok() is returned then text is filled and code continues,
	//if Error() is returned then it will return the error and skip the rest of the code
	//!NOTE!: pass only works if func's returnType is Result<T, R> (T DOESN'T have to be the sameType but R DOES)
	i32 number = pass passErrorChild(value);

	//can't use pass because thisFunc is Result<T, str> and callFunc Result Result<T, i32>
	Result<i32, i32> number2 = passErrorInt(value);
	if (number2.hasError())
		return Error(f"passErrorInt returned: {number2.error()}");

	return toStr(number);
}

func handleResult(bool value): str
{
	Result<str> result = passErrorParent(value);
	if(result.hasError() || !result.isOk())
	{
		println(f"this code contains an error: {result.error()}");
		return "";
	}

	//if you do result.value() when valueEmpty exception is thrown
	str unsafeValue = result.value();

	//if you do result.valueOr() when valueEmpty default value is returned
	str defaultValue = result.valueOr();

	//if you do result.valueOr(x) when valueEmpty value 'x' is returned
	str customDefaultValue = result.valueOr("empty");

	return result.value;
}
*/

//invis till endInvis is removed by tokenizer
# invis
//for syntax highlighting
func ctor();
func println(str msg);
func print(str msg);
func checkFail(bool condition, str msg);
func checkThrow(bool condition, str msg);
func checkFail_debug(bool condition, str msg);
func checkThrow_debug(bool condition, str msg);
func testArg(i8 a, i8 b);
struct func;
struct pub;
struct priv;
struct delete;
struct mut;
class f;
class i8;
class i32;
class f64;
class str;
class ui64;
class none;
# endInvis
//class Result<V, E = str>
//{
//	pub V? value {get; priv set;} = empty;
//	pub E? error {get; priv set;} = empty;
//	pub const bool isError {get; priv set;} = false;
//
//	pub ctor(this.value) {}
//	pub ctor(this.error) 
//		: isError(true) 
//	{
//	}
//
//	pub keyword::pass(): i32
//	{
//		return value;
//	}
//
//	pub getValue(): V
//	{
//		checkThrow(isError, "try to get value while Result has Error");
//		return value;
//	}
//
//	pub getError(): E
//	{
//		checkThrow(isError, "try to get value while Result has Error");
//		return error;
//	}
//
//}

class List_i32
{
	pub ui64 Size {get; priv set;} = 0;
	pub ui64 Capacity {get; priv set;} = 0;

	i32[] array = null;

	pub ctor() {}
	//pub ctor(this.array, this.Capacity) {}
	//pub ctor(this.Capacity) 
	//	: array(new i32[Capacity]) 
	//{
	//}

	pub ~ctor()
	{
		if (array != null)
		{
			delete array;
		}
	}

	pub reserve(ui64 newCapacity): none
	{
		if(newCapacity < Size)
		{
			Size = newCapacity;
		}

		Capacity = newCapacity;
		i32[] oldArray = array;
		array = new i32[newCapacity];

		for (ui64 i = 0; i < Size; i++)
		{
			array[i] = oldArray[i];
		}
		delete oldArray;
	}

	pub push(i32 item): bool
	{
		bool hasResized = false;
		if (Size + 1 > Capacity)
		{
			reserve(Capacity * 2);
			hasResized = true;
		}

		array[Size++] = item;
		return hasResized;
	}

	pub pop(i32 item): i32
	{
		checkThrow(Size == 0, "trying to pop empty array");
		Size--;    
		return array[Size];
	}

	pub at(i32 index): i32 &
	{
		checkThrow(index >= Size, "index is out of bounds");
		return array[index];
	}

	//pub [](ui64 index): i32 &
	//{
	//	checkFail(index >= Capacity, "trying to index element of index that is out of bounds");
	//	return array[index];
	//}

	//pub +=(i32 item): bool
	//{
	//	return push(item);
	//} 

	//pub +=(List_i32 items): bool
	//{
	//	bool hasResized = false;
	//	if (Capacity < Size + items.Size)
	//	{
	//		reserve(Size + items.Size);
	//		hasResized = true;
	//	}

	//	for (ui64 i = Size; i < Size + items.Size; i++)
	//	{
	//		array[i] = items[i];
	//	}
	//	return hasResized;
	//} 
}

func sum(i32 a, i32 b): i32
{
	return a + b;
}

func sum(f64 a, f64 b): i32
{
	return a + b;
}

func testArg(i8 a, i8 b): i8
{
	return a;
}

func sumPlusOne(i32 a, mut i32 b): i32
{
	b++;
	return a + b;
}

func increment(out i32 a): none
{
	a++;
}

func testIf(bool condition): none
{
	if (condition) 
	{
		println("if is true");

		i32 testNesting = 1;
		str boolString;
		if (testNesting)
		{
			boolString = "true";
		}
		else
		{
			boolString = "false";
		}

		println(f"testNesting: {boolString}");
	}

	if (condition == true)
	{
		println("if is true");
	}

	if (!condition)
	{
		println("do not print");
	}
	else
	{
		println("if is true");
	}

	if (!condition)
	{
		println("do not print");
	}
	else if (condition)
	{
		println("print else if");
	}

	if (!condition)
	{
		println("do not print");
	}
	else if (!condition)
	{
		println("do not print");
	}
	else
	{
		println("print else");
	}
}

func testForLoop(): none
{
	println("\n------ forLoop ------\n");
	i32 i = 0;
	for (; i < 10; i++)
	{
		print(f"{i}, ");
	}
	println("");
}

func main(): i32
{
	const str tokenizeHell = " ()--,./\\;' \t \n \r \\ \' {} !@#$%^&*() \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" ";

    println("------ sum ------\n");
	i32 result = sum(1, 2);

	f64 fl = 8;
	i32 result2 = sum(fl, fl);
	println(result); //prints 3
	println(result2); //prints 16

	println("\n\n------ sumPlusOne ------\n");
	result = sumPlusOne(1, 2);
	println(f"sumPlus: {result}"); //prints 4

	println("\n\n------ increment ------\n");
	i32 value = 1;
	println(f"first value: {value}"); //prints 1
	increment(out value);
	println(f"after increment value: {value}"); //prints 2

	testIf(true);
	testForLoop();

	i32[] array = null;
	array = new i32[2];
	array[0] = 0;
	array[1] = 1;
	i32 el = array[0];

	println("\n\n------ testArray ------\n");
	println(f"array[0]={array[0]} shouldBe=0, array[1]={array[1]} shouldBe=1");

	delete array;

	//increment(out i32 initInOutValue);
	//println(f"after increment initInOutValue: {value}"); //prints 1
	return 0;
}