/*
//Result is Result<T, default=str>
func passErrorChild(bool value): Result<i32>
{
	if(value == true)
		return 1;

	return Error("error thrown");
}

//Result is Result<T, i32>
func passErrorInt(bool value): Result<i32, i32>
{
	if(value == true)
		return 1;

	return Error(-1);
}

func passErrorParent(bool value): Result<str>
{	
	//if Ok() is returned then text is filled and code continues,
	//if Error() is returned then it will return the error and skip the rest of the code
	//!NOTE!: pass only works if func's returnType is Result<T, R> (T DOESN'T have to be the sameType but R DOES)
	i32 number = pass passErrorChild(value);

	//can't use pass because thisFunc is Result<T, str> and callFunc Result Result<T, i32>
	Result<i32, i32> number2 = passErrorInt(value);
	if (number2.hasError())
		return Error(f"passErrorInt returned: {number2.error()}");

	return number.toStr();
}

func handleResult(bool value): str
{
	Result<str> result = passErrorParent(value);
	if(result.hasError() || !result.isOk())
	{
		println(f"this code contains an error: {result.error()}");
		return "";
	}

	//if you do result.value() when valueEmpty exception is thrown
	str unsafeValue = result.value();

	//if you do result.valueOr() when valueEmpty default value is returned
	str defaultValue = result.valueOr();

	//if you do result.valueOr(x) when valueEmpty value 'x' is returned
	str customDefaultValue = result.valueOr("empty");

	return result.value;
}


*/
#invis
//for syntax highlighting
func println(string msg);
struct func;
struct mut;
class i32;
class str;
class none;
class f;
#endInvis


func sum(i32 a, i32 b): i32
{
	return a + b;
}

func sumPlusOne(i32 a, mut i32 b): i32
{
	b++;
	return a + b;
}

func increment(out i32 a): none
{
	a++;
}

//func testIf(): none
//{
//	if (true) 
//	{
//		println("if is true");
//	}

//	if (true)
//		println("if compact true");

//	if (false)
//	{ 
//		println("do not print");
//	} 
//	else if (false)
//	{ 
//		println("do not print");
//	} 
//	else
//	{	
//		println("print");
//	}
//}

func main(): i32
{
	const str tokenizeHell = " ()--,./\\;' \t \n \r \\ \' {} !@#$%^&*() \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" ";

//testIf();
bool test = (1 == 1);
println(test);

    println("------ sum ------\n");
	i32 result = sum(1, 2);
	println(result); //prints 3

	println("\n\n------ sumPlusOne ------\n");
	result = sumPlusOne(1, 2);
	println(f"sumPlus: {result}"); //prints 4

	println("\n\n------ increment ------\n");
	i32 value = 1;
	println(f"first value: {value}"); //prints 1
	increment(out value);
	println(f"after increment value: {value}"); //prints 2

	//increment(out i32 initInOutValue);
	//println(f"after increment initInOutValue: {value}"); //prints 1
	//return 0;
}