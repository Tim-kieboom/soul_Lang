//invis till endInvis is removed by tokenizer
#invis
//for syntax highlighting
func Error(str err);
func Ok(i32 val);

func ctor();
func println(str msg);
func println();
func len(str[] array);
func len(str msg);
func print(str msg);
func checkThrow(bool condition, str msg);
func checkFail(bool condition, str msg);
func Throw(str msg);
func Fail(str msg);
struct self;
struct pub;
struct mut;
struct pass;
struct copy;
struct func;
struct priv;
struct Range;
struct delete;
struct inline;
struct Functional;
struct CompileConst;
class i8;
class i16;
class i32;
class i64;
class u8;
class u16;
class u32;
class u64;
class uSize;
class f32;
class f64;
class str;
class none;
class Result;
class TYPE;
class f;
# endInvis

CompileConst u32 MAX_U32 = (32 ** 2) - 1;

Functional sqrt(f64 x): f64
{
    const result = 2 </ x;
    return result;
}

//class Ok<T>
//{
//    pub T data;
//    pub ctor(this.data) { }
//}

//class Error<T>
//{
//    pub T data;
//    pub ctor(this.data) { }
//}

//class Result<TValue, TError>
//{
//    Ok<TValue>? value = null;
//    Error<TError>? error = null;

//    pub ctor() { }

//    pub ctor(Ok<TValue> value_) 
//    {
//        value = value_;
//    }

//    pub ctor(Error<TError> error_) 
//    {
//        error = error_;
//    }

//    pub HasError(): bool 
//    {
//        return error != null; 
//    }

//    pub HasValue(): bool
//    {
//        return value != null; 
//    }

//    pub isEmpty() bool
//    {
//        return !HasError() && !HasValue();
//    }

//    pub Error(): TError& 
//    {
//        checkFail(!HasError(), "Result does not have error");

//        return error; 
//    }

//    pub Value(): TValue&
//    {
//        checkFail(!HasValue(), "Result does not have value");

//        return value;
//    }

//    //pub this::pass(): TValue&
//    //{
//    //    if(hasValue())
//    //    {
//    //        pass::Ok();
//    //    }
//    //    else
//    //    {
//    //        pass::Error();
//    //    }
//    //}

//    //priv this::pass::Ok(): TValue&
//    //{
//    //    return value.data;
//    //}

//    //priv this::pass::Error(): TError&
//    //{
//    //    return error.data;
//    //}
//}

//class Ref<T>
//{
//    T[] ref = new T[1];
    
//    pub ctor(mut T& value) { ref[0] = value }

//    pub get(): T&
//    {
//        return ref[0];
//    }
//}

//class List<T>
//{
//    Ref<T[]> arrayRef = Ref<T[]>(new T[0]);

//    pub uSize Size = 0;//{get; priv set;} = 0;
//    pub uSize Capacity = 0;
//    //{
//    //    get 
//    //    {
//    //        return len(arrayRef.get());
//    //    } 
//    //    priv set(uSize newCapacity)
//    //    {
//    //        arrayRef.get() = copy[newCapacity] arrayRef.get();
//    //    } 
//    //} = 0;

//    pub ctor() { }
//    pub ctor(this.Capacity) { }
//    pub ctor(mut T[] array, this.Size)
//        : arrayRef(Ref<T[]>(array))
//    {
//    }

//    pub isEmpty(): bool
//    {
//        return size == 0;
//    }

//    pub Data(): T[]
//    {
//        return arrayRef.get();
//    }

//    pub Push(T value): none
//    {
//        CompileConst u32 LAST_CAPACITY_BEFORE_OVERFLOW = (16 ** 2);

//        if (Size + 1 > Capacity)
//        {
//            if((Capacity == 0))
//            {   
//                reserve(1);
//            }
//            else if(Capacity < LAST_CAPACITY_BEFORE_OVERFLOW)
//            {
//                reserve(Capacity * 2);
//            }
//            else if(Capacity == MAX_U32)
//            {
//                Fail(f"can't increase capacity of List, because List reached max Capacity:{MAX_U32}");
//            }
//            else
//            {
//                reserve(MAX_U32);
//            }
//        }

//        T[]& array = arrayRef.get();
//        array[Size++] = value;
//    }

//    pub Peek(): T&
//    {
//        checkFail((Size == 0), "can not peek empty list");
//        return array[Size - 1];
//    }

//    pub Pop(): T
//    {
//        checkFail((Size == 0), "can not pop empty list");
//        T[]& array = arrayRef.get();
//        return array[--Size];
//    }

//    priv reserve(uSize newCapacity): none
//    {
//        T[]& array = arrayRef.get();
//        array = copy[newCapacity] array;
//        Capacity = len(array);
//    }

//    //pub At(i64 index, out T& value): Result<none>
//    //{
//    //    if ((index < 0 && Size + index < 0) || (index > Size - 1))
//    //        return Error(f"index:{index}, is to big, size:{Size}");
        
//    //    T[]& array = arrayRef.get();
//    //    value = array[index];
//    //    return Ok();
//    //}

//    //pub this::[] (i64 index): i32&
//    //{
//    //    return array[index];
//    //}

//    //pub this::copy(): List
//    //{
//    //    return List(copy array, Size);
//    //}

//    //pub this::copy(u64 capacity): List
//    //{
//    //    return List(copy[capacity] array, Size);
//    //}
//}

//func testList(): Result<none>
//{
//    List<i32> list = List<i32>();
//    list.Push(1);
//    list.Push(2);
//    list.Push(3);
//    list.Push(4);
//    list.Push(5);
//    pass list.At(1, out i32 value)

//    println(list.Data());
//    return;
//}

class ObjT<T>
{
    T value;
    pub bool field = true;
    pub bool[] fields = new bool[1];
    pub ctor(this.value) { }
    pub ctor(T value_, bool randomArgForOverloading) { value = value_; }

    pub Test(i32 foo): str {if(foo == 2) field = false; return "";}

    pub SetValue(T value_): none
    {
        value = value_;
    }

    pub GetValue(): T&
    {
        return value;
    }

    pub testMethodeTemplate<K>(K foo): none
    {
        T temp = GetValue();
        temp = value;
        K ktemp = foo;
    }
}



func main(mut str[] args): i32
{
    println();
    //CompileConst f64 foo = sqrt(4);
    bool[][][][] fields = new bool[][][][10];

bool[][][] arr2 = fields[0];
bool[][] arr = arr2[1];
bool[] ar = arr[2];
println(ar[1]);

    fields[0][1]++;
    ++fields[0][1];

    var obj = ObjT<str>("");
    ++obj.fields[0];
    //str f = obj.Test(2);
    //obj.SetValue("");

    //Result<none> result = testList()
    return 0;
}