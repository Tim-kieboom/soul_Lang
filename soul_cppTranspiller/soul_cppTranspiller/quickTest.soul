//invis till endInvis is removed by tokenizer
#invis
//for syntax highlighting
func ctor();
func println(str msg);
func print(str msg);
func checkThrow(bool condition, str msg);
func checkFail(bool condition, str msg);
struct func;
struct pub;
struct priv;
struct delete;
struct mut;
class i8;
class i16;
class i32;
class i64;
class ui8;
class ui16;
class ui32;
class ui64;
class f32;
class f64;
class str;
class none;
class f;
# endInvis

//func increment(out i32 foo): none
//{
//    foo++;
//}

func test(): str &
{
    return "foo";
}

func test(str foo, mut f64 bar = 2): str&
{
    println(bar);

    return "foo";
}

func test(i32 foo, mut f64 bar): str &
{
    i32 assingVar;
    assingVar = 1 + 2;
    assingVar += 1;

    f64 initVar = 2.1;
    i8 typeConvertion = assingVar;

    checkFail(assingVar == 10, f"value:{foo}, is not 10");
    return "foo";
}

func testOptional(i32 bar, str name = "tim", f32 float, i32 optional = 2): none 
{

}

func main(): i32
{
    testOptional(1, 2);
    testOptional(name: "bob", 1, optional: 3, 2);

    //test();
    //str result = test(1 + 2, 2.0);

    //test("foo");
    //str result2 = test("foo", bar: 2.0);

    //print("");
    //println("hello world");


    //i32 foo;
    //increment(out foo);

    //increment(out i32 far);

    //f64 bar;
    //increment(out bar);
}