//invis till endInvis is removed by tokenizer
#invis
//for syntax highlighting
func ctor();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
func println(str msg);
func print(str msg);
func assertThrow(bool condition, str msg);
func assertFail(bool condition, str msg);
=======
=======
>>>>>>> Stashed changes
none println(str msg);
none println();
uSize len(str[] array);
uSize len(str msg);
none print(str msg);
none checkThrow(bool condition, str msg);
none checkFail(bool condition, str msg);
none Throw(str msg);
none Fail(str msg);
struct pub;
struct mut;
struct pass;
struct copy;
>>>>>>> Stashed changes
struct func;
struct pub;
struct priv;
struct delete;
struct mut;
class i32;
class f64;
class ui64;
class str;
class none;
class f;
# endInvis

class Option_i32
{
<<<<<<< Updated upstream
    priv i32 value = 0;
    pub bool hasValue = false;
=======
    T value;
    pub ctor() { }
    pub ctor(this.value) { }
    pub ctor(T value_, bool randomArgForOverloading) { value = value_; }
>>>>>>> Stashed changes

    pub ctor() { }
    pub ctor(i32 initValue)
    {
        hasValue = initValue;
        hasValue = true;
    }

    pub set(i32 setValue): none
    {
        value = setValue;
        hasValue = true;
    }

    pub tryGet(out i32 outValue): bool
    {
        if(!hasValue)
        {
            return false;
        }
        outValue = value;
        return true;
    }
}

<<<<<<< Updated upstream
<<<<<<< Updated upstream
func main(): i32
=======
class obj
=======
class obj
{
    i32 foo = 0;
    pub ctor() { }
    pub ctor(this.foo) { }

    pub GetFoo(): i32
    {
        return foo;
    }

    pub SetFoo(i32 value): none
    {
        foo = value;
    }
}

func main(str[] args): i32
>>>>>>> Stashed changes
{
    i32 foo = 0;
    pub ctor() { }
    pub ctor(this.foo) { }

    pub GetFoo(): i32
    {
        return foo;
    }

    pub SetFoo(i32 value): none
    {
        foo = value;
    }
}

func main(str[] args): i32
>>>>>>> Stashed changes
{
    Option_i32 option;
    i32 value;
    if(option.tryGet(out value))
    {
        println("obj has no value (expected)");
    }

<<<<<<< Updated upstream
    option.set(5);
    if(option.tryGet(out value))
    {
        println("obj has no value (unexpected)");
        return 1;
    }
=======
    obj bar = obj(); 
    obj bar2 = obj(5);

    objT<i32> bar3 = objT<str>();

<<<<<<< Updated upstream
=======
    obj bar = obj(); 
    obj bar2 = obj(5);

    objT<i32> bar3 = objT<str>();

>>>>>>> Stashed changes

//Result<none> result = testList()
i32 ch1 = 'a';
char ch2 = char(ch1);

    str[] array;
    array = new str[10];
    array[3] = "ellie";
    println(len(array[3]));
    println(array);

    str[] array2 = copy[20] array;

    f64 log_ = 2 </ (2 </ 4 ** (10 log 100));

    CompileConst f64 POW  = 4 ** 0.5;
    CompileConst f64 ROOT = 2 </ 4;

    println(f"log:{log_}, pow 4 ** 0.5={POW}, root 2 </ 4={ROOT}");

    //CompileConst f64 foo = sqrt(4);
>>>>>>> Stashed changes

    println(f"obj value: {value}");
    return 0;
}